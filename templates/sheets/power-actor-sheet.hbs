<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<form class="sheet actor-sheet {{cssClass}}" autocomplete="off">
  <div class="jojo-sheet">
    <header class="sheet-header">
      <h1>{{actor.name}}</h1>
    </header>

    <nav class="tabs" data-group="primary">
      <div class="button-container">
        <a class="item" data-tab="stats">Stats</a>
      </div>
      <div class="button-container">
        <a class="item" data-tab="info">Power Info</a>
      </div>
    </nav>

    <section class="sheet-body">
      <!-- ─────────────────────── Stats Tab ─────────────────────── -->
      <div class="tab" data-tab="stats" style="display: block;">
        <div class="stat-line" data-stat="power">
          <label style="color: white;">Power</label>
          <div class="stat-stars" data-stat="power">
            {{#each (range 0 actor.system.attributes.stats.power.value) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.power.value 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
        <div class="stat-line" data-stat="precision">
          <label style="color: white;">Precision</label>
          <div class="stat-stars" data-stat="precision">
            {{#each (range 0 actor.system.attributes.stats.precision.value) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.precision.value 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
        <div class="stat-line" data-stat="speed">
          <label style="color: white;">Speed</label>
          <div class="stat-stars" data-stat="speed">
            {{#each (range 0 actor.system.attributes.stats.speed.value) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.speed.value 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
        <div class="stat-line" data-stat="range">
          <label style="color: white;">Range</label>
          <div class="stat-stars" data-stat="range">
            {{#each (range 0 actor.system.attributes.stats.range.value) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.range.value 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
        <div class="stat-line" data-stat="durability">
          <label style="color: white;">Durability</label>
          <div class="stat-stars" data-stat="durability">
            {{#each (range 0 actor.system.stats.durability) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.stats.durability 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
        <div class="stat-line" data-stat="learning">
          <label style="color: white;">Learning</label>
          <div class="stat-buttons">
            <button class="learning-type" data-type="original" onclick="showLearningStat('original')" style="background-color: var(--accent-dark) !important; color: white !important;">Original</button>
            <button class="learning-type" data-type="perm" onclick="showLearningStat('perm')" style="background-color: var(--accent-dark) !important; color: white !important;">Perm</button>
            <button class="learning-type" data-type="temp" onclick="showLearningStat('temp')" style="background-color: var(--accent-light) !important; color: black !important;">Temp</button>
          </div>
          <div class="stat-stars" data-stat="learning-original" style="display: none;">
            {{#each (range 0 actor.system.attributes.stats.learning.original) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.learning.original 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
          <div class="stat-stars" data-stat="learning-perm" style="display: none;">
            {{#each (range 0 actor.system.attributes.stats.learning.perm) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.learning.perm 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
          <div class="stat-stars" data-stat="learning-temp" style="display: block;">
            {{#each (range 0 actor.system.attributes.stats.learning.temp) as |star|}}
              <span class="stat-star filled">★</span>
            {{/each}}
            {{#each (range actor.system.attributes.stats.learning.temp 5) as |star|}}
              <span class="stat-star">☆</span>
            {{/each}}
          </div>
        </div>
      </div>

      <!-- ───────────────────── Stand Info Tab ───────────────────── -->
      <div class="tab" data-tab="info" style="display: none;">
        <div class="info-container">
          <div class="info-row">
            <label>Name:</label>
            <input
              type="text"
              name="system.info.standName"
              value="{{system.info.standName}}"
              placeholder="Enter power name"
            />
          </div>
          <div class="info-row">
            <label>User:</label>
            <input
              type="text"
              name="system.info.master"
              value="{{system.info.master}}"
              placeholder="Enter user name"
            />
          </div>
          <div class="info-row">
            <label>Type:</label>
            <select id="stand-type" name="system.info.type">
              <option value="Hamon" {{#ifEquals system.info.type "Hamon"}}selected{{/ifEquals}}>Hamon</option>
              <option value="Vampire" {{#ifEquals system.info.type "Vampire"}}selected{{/ifEquals}}>Vampire</option>
              <option value="Pillar Man" {{#ifEquals system.info.type "Pillar Man"}}selected{{/ifEquals}}>Pillar Man</option>
              <option value="Spin" {{#ifEquals system.info.type "Spin"}}selected{{/ifEquals}}>Spin</option>
              <option value="Armed Phenomenon" {{#ifEquals system.info.type "Armed Phenomenon"}}selected{{/ifEquals}}>Armed Phenomenon</option>
              <option value="Cyborg" {{#ifEquals system.info.type "Cyborg"}}selected{{/ifEquals}}>Cyborg</option>
              <option value="Other" {{#ifEquals system.info.type "Other"}}selected{{/ifEquals}}>Other</option>
            </select>
          </div>
          <div class="info-row">
            <label>Design:</label>
            <textarea
              name="system.info.design"
              rows="3"
              placeholder="Enter design"
            >{{system.info.design}}</textarea>
          </div>
          <div class="info-row">
            <label>Ability:</label>
            <textarea
              name="system.info.ability"
              rows="3"
              placeholder="Enter ability"
            >{{system.info.ability}}</textarea>
          </div>
          <div class="info-row">
            <label>Cost:</label>
            <input
              type="text"
              name="system.info.cost"
              value="{{system.info.cost}}"
              readonly
            />
          </div>
        </div>
      </div>
    </section>
  </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const typeSelect = document.getElementById('stand-type');
    const statLabels = {
      Hamon: ['Strength', 'Accuracy', 'Agility', 'Conduction', 'Blocking', 'Learning'],
      Vampire: ['Strength', 'Senses', 'Reflex', 'Bodily Control', 'Resilience', 'Learning'],
      'Pillar Man': ['Strength', 'Senses', 'Reflexes', 'Bodily Control', 'Resilience', 'Learning'],
      Spin: ['Mass', 'Control', 'Velocity', 'RPM', 'Sturdiness', 'Learning'],
      'Armed Phenomenon': ['Strength', 'Accuracy', 'Agility', 'Evolution', 'Endurance', 'Learning'],
      Cyborg: ['Tech Power', 'Precision', 'Speed', 'Range', 'Durability', 'Learning'],
      Other: ['Power', 'Precision', 'Speed', 'Range', 'Durability', 'Learning']
    };

    const updateStatLabels = (type) => {
      const labels = statLabels[type] || statLabels.Other;
      document.querySelector('[data-stat="power"] label').textContent = labels[0];
      document.querySelector('[data-stat="precision"] label').textContent = labels[1];
      document.querySelector('[data-stat="speed"] label').textContent = labels[2];
      document.querySelector('[data-stat="range"] label').textContent = labels[3];
      document.querySelector('[data-stat="durability"] label').textContent = labels[4];
      document.querySelector('[data-stat="learning"] label').textContent = labels[5];
    };

    typeSelect.addEventListener('change', (event) => {
      updateStatLabels(event.target.value);

      // Trigger a re-render of the sheet
      const actorSheet = ui.windows[Object.keys(ui.windows).find(key => ui.windows[key].actor?.id === game.actors.get(ui.activeActor)?.id)];
      if (actorSheet) actorSheet.render(true);
    });

    // Initialize labels on page load
    updateStatLabels(typeSelect.value);
  });

  function showLearningStat(type) {
    const buttons = document.querySelectorAll('.learning-type');
    buttons.forEach(button => {
      if (button.dataset.type === type) {
        button.style.backgroundColor = 'var(--accent-light)';
        button.style.color = 'black';
      } else {
        button.style.backgroundColor = 'var(--accent-dark)';
        button.style.color = 'white';
      }
    });

    document.querySelector('[data-stat="learning-original"]').style.display = type === 'original' ? 'block' : 'none';
    document.querySelector('[data-stat="learning-perm"]').style.display = type === 'perm' ? 'block' : 'none';
    document.querySelector('[data-stat="learning-temp"]').style.display = type === 'temp' ? 'block' : 'none';
  }
</script>
